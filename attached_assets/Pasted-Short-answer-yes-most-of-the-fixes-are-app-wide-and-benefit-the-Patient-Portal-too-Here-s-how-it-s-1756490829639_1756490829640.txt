Short answer: yes—most of the fixes are app-wide and benefit the Patient Portal too. Here’s how it shakes out:

What already applies to both (no extra work)

Voice/TTS: the shared useVoiceSelection, updated useSpeechSynthesis, and MobileSpeechButton make the EN/ES voices consistent, less robotic, with faster first utterance everywhere Chat is used (patient + therapist).

Language switching: the detectLanguage + “set language before speaking” logic in ChatContainer stabilizes bilingual use for both portals.

Crisis escalation gating: shouldEscalate() reduces false positives in both portals (you call it in Chat flows).

Mobile tap lockups: removing the high z-index wrapper in ChatInput fixes the navigation/tap issue in both portals (same component).

InterventionSummariesSection: the component itself is now defensive and will render whenever it receives summaries—works for both sides.

What was therapist-only and how to mirror it for patients

Two things in the previous patch were therapist-specific: the route and the page wiring. To get identical Intervention Summaries behavior in the Patient Portal, make sure the patient-facing API returns the same normalized shape and your patient page passes it through.

1) Add a patient analytics route that returns the same shape

If you don’t already have one, add this (or align your existing one) so it mirrors the therapist route:

// server/routes.patient.ts
import express from 'express';
import { storage } from './storage';
import { normalizeInterventionSummary } from '../shared/schema';

const patient = express.Router();

patient.get('/api/patient/analytics', async (req, res) => {
  try {
    const { userId } = req.query;
    if (!userId) return res.status(400).json({ error: 'userId required' });

    const [profile, analyses, messages, goals, summariesRaw] = await Promise.all([
      storage.getProfile(String(userId)),
      storage.getAnxietyAnalysesByUser(String(userId)),
      storage.getChatMessagesByUser(String(userId)),
      storage.getUserGoalsByUser(String(userId)),
      storage.getInterventionSummariesByUser(String(userId)),
    ]);

    const summaries = (summariesRaw ?? []).map(normalizeInterventionSummary);

    return res.json({
      profile,
      analyses,
      messages,
      goals,
      summaries, // ✅ same key + normalized
    });
  } catch (e) {
    console.error('Patient analytics error:', e);
    res.status(500).json({ error: 'Failed to load analytics' });
  }
});

export default patient;


Because storage.getInterventionSummariesByUser() and normalizeInterventionSummary() are already shared, the patient route automatically gets the same summaries shape the therapist route does.

2) Patient portal page: pass summaries straight to the component

Wherever your Patient Portal shows analytics (e.g., PatientAnalyticsPage.tsx), make sure you:

Fetch from /api/patient/analytics?userId=...

Don’t rename the property—use payload.summaries.

Pass it to InterventionSummariesSection:

<InterventionSummariesSection
  summaries={payload.summaries}
  analyses={payload.analyses}
  messages={payload.messages}
  goals={payload.goals}
/>


If your patient page currently expects interventions or interventionSummaries, just switch to summaries (or keep the small compatibility shim: const summaries = payload.summaries ?? payload.interventions ?? payload.interventionSummaries ?? []).

Optional (applies to both): dual-model router

If you adopt the Claude 4.1 + GPT-5 router, the /api/chat route serves both portals. That gives you the concise, clinically tuned tone everywhere.

TL;DR

Yes: TTS, language stability, crisis gating, nav tap fix, and the summaries component all apply to the Patient Portal.

Add / align one patient analytics route to return { profile, analyses, messages, goals, summaries }.

Ensure the patient analytics page passes summaries into InterventionSummariesSection.

Once those are in, the Patient Portal will show the Intervention Summaries just like the Therapist Portal, with the same stable voices and behavior.