Line-by-line fixes you requested
components/AdvancedAnxietyTracker.tsx

L16 – avg of recentAnalyses (gad7Score)
Guarded both the array and its length:

Math.round(((recentAnalyses ?? [])
  .reduce((sum, a) => sum + (a.gad7Score ?? 0), 0)) /
  Math.max((recentAnalyses ?? []).length, 1))


L20 – flatMap triggers

(recentAnalyses ?? []).flatMap(a => a.triggers ?? [])


L26–28 – topTriggers

const topTriggers = Object.entries(commonTriggers ?? {})
  .sort(([, a], [, b]) => b - a)
  .slice(0, 3);


L97 / L114 / L132 / L149 / L165 – currentAnalysis arrays

{(currentAnalysis?.dsm5Indicators ?? []).map(...)}
{(currentAnalysis?.beckAnxietyCategories ?? []).map(...)}
{(currentAnalysis?.cognitiveDistortions ?? []).map(...)}
{(currentAnalysis?.triggers ?? []).map(...)}
{(currentAnalysis?.recommendedInterventions ?? []).map(...)}

components/AnxietyAnalyticsTracker.tsx

L23 – processedTrends build

const processedTrends = (analyses ?? []).map((analysis, index) => ({
  // ...
  interventionsUsed: analysis.recommendedInterventions ?? [],
}));


L51 / L56 – averages on trends
Guarded both array and length:

Math.round(((trends ?? []).reduce((s, t) => s + (t.anxietyLevel ?? 0), 0)) /
           Math.max((trends ?? []).length, 1));
Math.round(((trends ?? []).reduce((s, t) => s + (t.gad7Score ?? 0), 0)) /
           Math.max((trends ?? []).length, 1));


L62–L67 – nested forEach

(trends ?? []).forEach((trend) => {
  (trend.interventionsUsed ?? []).forEach((intervention) => {
    if (!interventionEffectiveness[intervention]) {
      interventionEffectiveness[intervention] = [];
    }
    interventionEffectiveness[intervention].push(trend.responseEffectiveness);
  });
});


L71 / L74 – avgEffectiveness with empty scores

return Object.entries(interventionEffectiveness)
  .map(([intervention, scores]) => ({
    intervention,
    avgEffectiveness: scores.length
      ? scores.reduce((sum, s) => sum + s, 0) / scores.length
      : 0,
  }))
  .sort((a, b) => b.avgEffectiveness - a.avgEffectiveness);


L84–L88 – recent/earlier windows & averages

const recent = (trends ?? []).slice(-3);
const avgRecent = recent.length
  ? recent.reduce((s, t) => s + (t.anxietyLevel ?? 0), 0) / recent.length
  : 0;

const earlier = (trends ?? []).slice(0, -3);
const avgEarlier = earlier.length
  ? earlier.reduce((s, t) => s + (t.anxietyLevel ?? 0), 0) / earlier.length
  : 0;


L169 – render list

{(mostEffectiveInterventions ?? []).map((item, index) => ( ... ))}

components/AnxietyTracker.tsx

L13 – avg of recentAnalyses (level)

Math.round(((recentAnalyses ?? [])
  .reduce((sum, a) => sum + (a.level ?? 0), 0)) /
  Math.max((recentAnalyses ?? []).length, 1))


L17 – flatMap triggers

(recentAnalyses ?? []).flatMap(a => a.triggers ?? [])


L23–25 – topTriggers

const topTriggers = Object.entries(commonTriggers ?? {})
  .sort(([, a], [, b]) => b - a)
  .slice(0, 3);


L64 – render list

{(topTriggers ?? []).map((trigger) => ( ... ))}


L83 – recent list

{(recentAnalyses ?? []).slice(-5).map((analysis, index) => ( ... ))}

components/ChatContainer.tsx

L168 – last user message

const lastUserMessage = (messages ?? []).slice().reverse().find(m => m.sender === 'user');

components/ChatMessages.tsx

L34 – render messages

{(messages ?? []).map((message) => ( ... ))}

components/MoodTracker.tsx

L53 – render moods

{(moods ?? []).map((mood) => ( ... ))}

components/analytics/AnxietyChartsSection.tsx

L33, L37 – defensive logging

console.log('First few analyses:', (analyses ?? []).slice(0, 3));
console.log('ALL UNIQUE USER_IDS:', [...new Set((analyses ?? []).map(a => a.user_id))]);

components/analytics/AnxietyDistributionChart.tsx

L48 – total from enhancedData

const total = (enhancedData ?? []).reduce((sum, item) => sum + (item.count ?? 0), 0);

What this fixes / why the chat recovers

Those spots were throwing “Cannot read properties of undefined (reading ‘forEach’/‘map’/‘reduce’)”. React’s error overlay halts rendering, which makes the AI chat agent look dead even if its network calls are fine. With these guards:

Analytics and trackers render safely even when data is empty or partially missing.

The chat UI won’t be taken down by unrelated array errors.

If you’d like me to sweep the therapist tabs next with the same pattern (or run a codemod across the entire repo), say the word and I’ll patch those too.